<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stacktrace on lihui7800</title>
    <link>https://lihui7800.github.io/tags/stacktrace/</link>
    <description>Recent content in Stacktrace on lihui7800</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 21 Mar 2019 17:24:30 +0800</lastBuildDate>
    
	<atom:link href="https://lihui7800.github.io/tags/stacktrace/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Panic</title>
      <link>https://lihui7800.github.io/golang/panic/</link>
      <pubDate>Thu, 21 Mar 2019 17:24:30 +0800</pubDate>
      
      <guid>https://lihui7800.github.io/golang/panic/</guid>
      <description>程序panic之后  go 程序的错误处理很多人都说有问题，能够写吐了。其实和panic比起来，还可以吧，毕竟error是可以捕获的，而且还能根据错误进行处理。 panic可以捕获呀，虽然方式上面不是特别的优雅。比如下面的代码就可以起到捕获panic的作用：  for{ defer func(){ if err:=recover();err!=nil{ fmt.Println(err) } }() //业务代码 }   你看这不是捕获了panic了吗？
 那么这段代码的打印的内容是什么呢？我们可以预测下。(例子随便找的，但应该和上面代码的效果是一样的。因为都没有显示在哪里出的这个问题。)
runtime error: integer divide by zero   不是应该有stracktrace吗？要不然一个错误可能发生的地方太多了。鬼知道是哪里。
 所以对于定位问题没有一点帮助，毕竟我们写的代码不是只有几百行，而是很多行。 说了这么多，其实我们需要的就是一个追踪错误的定位而已。这样一目了然。如果对于代码熟悉的人，估计在看到错误的定位的时候，心里已经有了一个修复问题的解决方案了。 先看代码吧：
for{ defer func() { if err := recover(); err != nil { var buf [4096]byte n := runtime.Stack(buf[:], false) fmt.Println(string(buf[:n])) out &amp;lt;- d //不是说好的错误追踪吗？为什么这里有一个通道。它不能乱入呀。 } }() //业务代码 }   我觉得已经很清晰了。看了代码，也要看结果呦。
 goroutine 20 [running]: main.</description>
    </item>
    
  </channel>
</rss>