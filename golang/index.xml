<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golangs on lihui7800</title>
    <link>https://lihui7800.github.io/golang/</link>
    <description>Recent content in Golangs on lihui7800</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 21 Mar 2019 17:24:30 +0800</lastBuildDate>
    
	<atom:link href="https://lihui7800.github.io/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Panic</title>
      <link>https://lihui7800.github.io/golang/panic/</link>
      <pubDate>Thu, 21 Mar 2019 17:24:30 +0800</pubDate>
      
      <guid>https://lihui7800.github.io/golang/panic/</guid>
      <description>程序panic之后  go 程序的错误处理很多人都说有问题，能够写吐了。其实和panic比起来，还可以吧，毕竟error是可以捕获的，而且还能根据错误进行处理。 panic可以捕获呀，虽然方式上面不是特别的优雅。比如下面的代码就可以起到捕获panic的作用：  for{ defer func(){ if err:=recover();err!=nil{ fmt.Println(err) } }() //业务代码 }   你看这不是捕获了panic了吗？
 那么这段代码的打印的内容是什么呢？我们可以预测下。(例子随便找的，但应该和上面代码的效果是一样的。因为都没有显示在哪里出的这个问题。)
runtime error: integer divide by zero   不是应该有stracktrace吗？要不然一个错误可能发生的地方太多了。鬼知道是哪里。
 所以对于定位问题没有一点帮助，毕竟我们写的代码不是只有几百行，而是很多行。 说了这么多，其实我们需要的就是一个追踪错误的定位而已。这样一目了然。如果对于代码熟悉的人，估计在看到错误的定位的时候，心里已经有了一个修复问题的解决方案了。 先看代码吧：
for{ defer func() { if err := recover(); err != nil { var buf [4096]byte n := runtime.Stack(buf[:], false) fmt.Println(string(buf[:n])) out &amp;lt;- d //不是说好的错误追踪吗？为什么这里有一个通道。它不能乱入呀。 } }() //业务代码 }   我觉得已经很清晰了。看了代码，也要看结果呦。
 goroutine 20 [running]: main.</description>
    </item>
    
    <item>
      <title>http 302跳转的思考</title>
      <link>https://lihui7800.github.io/golang/http_302/</link>
      <pubDate>Mon, 04 Mar 2019 19:33:33 +0800</pubDate>
      
      <guid>https://lihui7800.github.io/golang/http_302/</guid>
      <description>302 处理 首先需要明白 302 这个状态是啥意思。
 302重定向又称之为302代表暂时性转移(Temporarily Moved )，英文名称：302 redirect。 也被认为是暂时重定向（temporary redirect），一条对网站浏览器的指令来显示浏览器被要求显示的不同的URL，当一个网页经历过短期的URL的变化时使用。一个暂时重定向是一种服务器端的重定向，能够被搜索引擎蜘蛛正确地处理。   声明这来自百度百科。 简单来说就是一个变更请求地址的方法。最初应该是用来解决一些网站的地址变更。 其实很多时候是不用处理的。  虽然很多时候不用处理，但显然我们不会这样，我们面对的问题是需要处理的。我遇到的大体分为一下几种情况。
1.通过302跳转进行文件发送。很多时候应该是header里面多了一个配置，用来存放文件名。
Content-Disposition: attachment;filename=&amp;quot;5A723D82CB3FB14EA84B13D59684236E.zip&amp;quot; Content-Type: application/zip; charset=UTF-8  这样的做法是为了下载zip的压缩文件。（应该还有很多的文件格式）
2.有些重要的数据是不希望能够很顺利的让用户获取的，这时需要一些跳转验证之类的动作，302也就成了必选的返回状态了。最熟知的就是淘宝的网站了，百度也有。
突然发现可以通过302可以在网站入口起到一定的分流作用。减轻了首页的压力同时还保护了自己。至少搜索引擎会保留首页地址而忽略真实的链接地址。</description>
    </item>
    
    <item>
      <title>Mutex</title>
      <link>https://lihui7800.github.io/golang/mutex/</link>
      <pubDate>Wed, 27 Feb 2019 20:19:57 +0800</pubDate>
      
      <guid>https://lihui7800.github.io/golang/mutex/</guid>
      <description>1,竞态的出现原因  竞态的产生是因为多个对象同时访问一个对象的时候就会产生。 最常见的例子是数据库。
在开发中多线程首先面对的问题就是如何竞争资源。
 例子来源于网络,大致应该是：
var a = 0 func run() { for i := 0; i &amp;lt; 1000; i++ { go add() } time.Sleep(10 * time.Minute) fmt.Println(a) } func add() { a++ }   请允许我使用 ==time.Sleep()== 来让主线程等待结果。其实也可以使用waitgroup来调度1000个协程的。
上面的例子可以得出的结果是不一定，如果1000个协程按照顺序进行处理的话结果应该是1000.
 2, 要处理竞态，golang提供了一个库，sync 看名字就知道是和竞态有关系的。  Mutex 互斥锁 1. 首先看下源码：
 package sync import ( &amp;quot;internal/race&amp;quot; &amp;quot;sync/atomic&amp;quot; &amp;quot;unsafe&amp;quot; ) func throw(string) // provided by runtime // A Mutex is a mutual exclusion lock.</description>
    </item>
    
  </channel>
</rss>