<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golangs on lihui7800 个人博客</title>
    <link>https://lihui7800.github.io/golang/</link>
    <description>Recent content in Golangs on lihui7800 个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 21 Mar 2019 17:24:30 +0800</lastBuildDate>
    
	<atom:link href="https://lihui7800.github.io/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Panic</title>
      <link>https://lihui7800.github.io/golang/panic/</link>
      <pubDate>Thu, 21 Mar 2019 17:24:30 +0800</pubDate>
      
      <guid>https://lihui7800.github.io/golang/panic/</guid>
      <description>程序panic之后 go 程序的错误处理很多人都说有问题，能够写吐了。其实和panic比起来，还可以吧，毕竟error是可以捕获的，而且还能根据错</description>
    </item>
    
    <item>
      <title>http 302跳转的思考</title>
      <link>https://lihui7800.github.io/golang/http_302/</link>
      <pubDate>Mon, 04 Mar 2019 19:33:33 +0800</pubDate>
      
      <guid>https://lihui7800.github.io/golang/http_302/</guid>
      <description>302 处理 首先需要明白 302 这个状态是啥意思。 1 302重定向又称之为302代表暂时性转移(Temporarily Moved )，英文名称：302 redirec</description>
    </item>
    
    <item>
      <title>Mutex</title>
      <link>https://lihui7800.github.io/golang/mutex/</link>
      <pubDate>Wed, 27 Feb 2019 20:19:57 +0800</pubDate>
      
      <guid>https://lihui7800.github.io/golang/mutex/</guid>
      <description>1,竞态的出现原因 竞态的产生是因为多个对象同时访问一个对象的时候就会产生。 最常见的例子是数据库。 在开发中多线程首先面对的问题就是如何竞争资源</description>
    </item>
    
  </channel>
</rss>